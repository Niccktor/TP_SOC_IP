/******************************************************************************
 *
 * Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Use of the Software is limited solely to applications:
 * (a) running on a Xilinx device, or
 * (b) that interact with a Xilinx device through a bus or interconnect.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Xilinx shall not be used
 * in advertising or otherwise to promote the sale, use or other dealings in
 * this Software without prior written authorization from Xilinx.
 *
 ******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xgpio.h"
#include "xparameters.h"
#include "sleep.h"
#include "xintc.h"
#include "xtmrctr.h"

#define GPIO_DEVICE_ID	XPAR_GPIO_0_DEVICE_ID
#define LED_CHANNEL		2
#define	SWITCH_CHANNEL	1

#define GPIO_DEVICE_7SEG_ID XPAR_GPIO_1_DEVICE_ID
#define AN7SEG_CHANNEL 1
#define DISP7SEG_CHANNEL 2

#define TMR_DEVICE_ID      XPAR_TMRCTR_0_DEVICE_ID
#define INTC_DEVICE_ID     XPAR_INTC_0_DEVICE_ID
#define IRQ_VECTOR_ID      XPAR_INTC_0_TMRCTR_0_VEC_ID


static XTmrCtr TimerInst;
static XIntc   IntcInst;

XGpio Gpio;
XGpio Gpio7seg;




void test_led (void)
{
	int i = 0;
	while(i++ < 5){
		XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, 0xAAAA);
		sleep(1);
		XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, 0x5555);
		sleep(1);
	}
}

void ledChenillard(void)
{
	u32 led_state;
	int pos = 0;
	int direction = 1;
	while(1)
	{
		led_state = (1 << pos);
		pos += direction;
		if (pos == 15)
			direction = -1;
		else if (pos == 0)
			direction = 1;
		XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, led_state);
		sleep(1);
	}
}

#define REFRESH_DELAY_US  2000  // 2ms par digit

const u8 hex_to_segments[19] = {
		0xC0, // 0
		0xF9, // 1
		0xA4, // 2
		0xB0, // 3
		0x99, // 4
		0x92, // 5
		0x82, // 6
		0xF8, // 7
		0x80, // 8
		0x90, // 9
		0x88, // A
		0x83, // B
		0xC6, // C
		0xA1, // D
		0x86, // E
		0x8E, // F
		0x89, // H
		0xC7, // L
		0xC0  // O
};

u8 digit_segments[4] = {
		0x89,  // 0
		0xC7,  // 1
		0xC0 ,  // 2
		hex_to_segments[3]   // 3
};

const u8 anodes[4] = {
		0x0E,  // AN0
		0x0D,  // AN1
		0x0B,  // AN2
		0x07   // AN3
};

void test7seg(void)
{
	u32 switch_state = 0;
	while (1)
	{
		switch_state = XGpio_DiscreteRead(&Gpio, SWITCH_CHANNEL);
		digit_segments[0] = hex_to_segments[(switch_state >> 0)  & 0xF];
		digit_segments[1] = hex_to_segments[(switch_state >> 4)  & 0xF];
		digit_segments[2] = hex_to_segments[(switch_state >> 8)  & 0xF];
		digit_segments[3] = hex_to_segments[(switch_state >> 12)  & 0xF];
		for (int i = 0; i < 4; i++)
		{
			XGpio_DiscreteWrite(&Gpio7seg, DISP7SEG_CHANNEL, digit_segments[i]);
			XGpio_DiscreteWrite(&Gpio7seg, AN7SEG_CHANNEL, anodes[i]);
			usleep(REFRESH_DELAY_US);
		}
	}
	return ;
}

void hello2seg(void)
{
	const u8 tab[18]= {
			0xFF, //
			0xFF, //
			0xFF, //
			0xFF, //
			0x89, // H
			0x86, // E
			0xC7, // L
			0xC7, // L
			0xC0, // O
			0xFF, //
			0xA4, // 2
			0xC0, // 0
			0xA4, // 2
			0x92, // 5
			0xFF, //
			0xFF, //
			0xFF, //
			0xFF //
	};
	while (1)
	{
		int i =0;

		while (i<14)
		{

			digit_segments[3] = tab[i];
			digit_segments[2] = tab[i + 1];
			digit_segments[1] = tab[i + 2];
			digit_segments[0] = tab[i + 3];
			int k = 0;
			while (k++ < 100)
			{
				for (int j = 0; j < 4; j++)
				{
					XGpio_DiscreteWrite(&Gpio7seg, DISP7SEG_CHANNEL, digit_segments[j]);
					XGpio_DiscreteWrite(&Gpio7seg, AN7SEG_CHANNEL, anodes[j]);
					usleep(REFRESH_DELAY_US);
				}
			}
			i++;
		}
	}
}


void switch2leds(void)
{
	int i = 0;
	while (i++ < 1000)
	{
		u32 switch_state;

		switch_state = XGpio_DiscreteRead(&Gpio, SWITCH_CHANNEL);
		XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, switch_state);
		usleep(10000);
	}
}


void ledChenillardTimer(void)
{
	static u32 led_state;
	static int pos = 0;
	static int direction = 1;

	led_state = (1 << pos);
	pos += direction;
	if (pos == 15)
		direction = -1;
	else if (pos == 0)
		direction = 1;
	XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, led_state);
}

void TimerHandler(void *CallBackRef, u8 TmrCtrNumber) {
    // On reset l’interruption
    XTmrCtr_Reset(&TimerInst, TmrCtrNumber);
    ledChenillardTimer();
}

int main()
{
	init_platform();

	int status;

	// Initialiser le périphérique GPIO
	status = XGpio_Initialize(&Gpio, GPIO_DEVICE_ID);
	if (status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	XGpio_SetDataDirection(&Gpio, LED_CHANNEL, 0x0000);     // 16 bits en sortie
	XGpio_SetDataDirection(&Gpio, SWITCH_CHANNEL, 0xFFFF);  // 16 bits en entrée

	status = XGpio_Initialize(&Gpio7seg, GPIO_DEVICE_7SEG_ID);
	if (status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	XGpio_SetDataDirection(&Gpio7seg, AN7SEG_CHANNEL, 0x0000);     // 16 bits en sortie
	XGpio_SetDataDirection(&Gpio7seg, DISP7SEG_CHANNEL, 0x0000);  // 16 bits en entrée

	XTmrCtr_Initialize(&TimerInst, TMR_DEVICE_ID);
	XTmrCtr_SetHandler   (&TimerInst, TimerHandler, &TimerInst);
	XTmrCtr_SetOptions   (&TimerInst, 0, XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION);
    u32 load_val = (u32)(XPAR_CPU_M_AXI_DP_FREQ_HZ * 1) - 1;
    XTmrCtr_SetResetValue(&TimerInst, 0, load_val);


    XIntc_Initialize(&IntcInst, INTC_DEVICE_ID);
    XIntc_Connect(&IntcInst, IRQ_VECTOR_ID, (XInterruptHandler)XTmrCtr_InterruptHandler, &TimerInst);
    XIntc_Start(&IntcInst, XIN_REAL_MODE);
    XIntc_Enable(&IntcInst, IRQ_VECTOR_ID);
    Xil_ExceptionInit();
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
                                 (Xil_ExceptionHandler)XIntc_InterruptHandler,
                                 &IntcInst);
    Xil_ExceptionEnable();

    // 5) Démarrage du timer
    XTmrCtr_Start(&TimerInst, 0);

	/*hello2seg();
	test7seg();
	test_led();
	switch2leds();
	while(1)
		ledChenillard();*/

	print("Hello World\n\r");
	print("Successfully ran Hello World application");
	cleanup_platform();
	return 0;
}
